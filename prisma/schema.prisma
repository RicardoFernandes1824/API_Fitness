generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int                @id @default(autoincrement())
  email     String             @unique
  password  String
  username  String             @unique
  firstName String?
  lastName  String?
  gender    String?
  height    Float?
  weight    Float?
  photo     String?
  workoutId workoutRoutine[]
  sessionId trainningSession[]
}

model workoutRoutine {
  id                     Int                      @id @default(autoincrement())
  name                   String
  video                  String?
  deleted Boolean @default(false)
  userId                 Int // Foreign Key
  user                   User                     @relation(fields: [userId], references: [id])
  trainningSession       trainningSession[]
  workoutRoutineExercise workoutRoutineExercise[]
  workoutRoutineTemplate workoutRoutineTemplate[]
}

model trainningSession {
  id                  Int                   @id @default(autoincrement())
  workoutId           Int // foreign key
  workout             workoutRoutine        @relation(fields: [workoutId], references: [id])
  trainningSessionSet trainningSessionSet[]
  userId              Int // foreign key
  user                User                  @relation(fields: [userId], references: [id])
  startTime           DateTime?
  endTime             DateTime?
  finished            Boolean               @default(false)
}

model trainningSessionSet {
  id               Int              @id @default(autoincrement())
  setNumber        Int
  reps             Int
  weight           Int
  sessionId        Int
  trainningSession trainningSession @relation(fields: [sessionId], references: [id])
  exerciseId       Int
  exercise         exercise         @relation(fields: [exerciseId], references: [id])
  done             Boolean          @default(false)
}

enum ExerciseCategory {
  Chest
  Back
  Arms
  Legs
  Shoulder
}

model exercise {
  id                     Int                      @id @default(autoincrement())
  name                   String
  video                  String?
  description            String?
  tips                   String?
  imageURL               String?
  category               ExerciseCategory @default(Chest)
  workoutRoutineExercise workoutRoutineExercise[]
  workoutRoutineTemplate workoutRoutineTemplate[]
  trainningSessionSet    trainningSessionSet[]
}

model workoutRoutineExercise {
  id               Int            @id @default(autoincrement())
  exerciseId       Int // Foreign Key
  workoutRoutineId Int // Foreign Key
  exercise         exercise       @relation(fields: [exerciseId], references: [id])
  workoutRoutine   workoutRoutine @relation(fields: [workoutRoutineId], references: [id])
}

model workoutRoutineTemplate {
  id               Int            @id @default(autoincrement())
  exerciseId       Int // Foreign Key
  workoutRoutineId Int // Foreign Key
  reps             Int
  sets             Int
  exercise         exercise       @relation(fields: [exerciseId], references: [id])
  workoutRoutine   workoutRoutine @relation(fields: [workoutRoutineId], references: [id])
}
